{"version":3,"sources":["components/TodoItem.js","components/Todo.js","components/layout/Header.js","components/AddTodo.js","components/Pages/About.js","App.js","actions/itemActions.js","actions/Types.js","serviceWorker.js","reducers/todoReducer.js","reducers/index.js","Store.js","index.js"],"names":["TodoItem","getStyles","textDecoration","_this","props","todo","completed","backgroundColor","borderBottom","padding","_this$props$todo","this","id","title","react_default","a","createElement","style","type","onChange","completion","bind","btnStyle","onClick","delete","Component","background","color","borderRadius","cursor","float","border","Todo","todos","map","components_TodoItem","key","headerStyle","textAlign","marginBottom","linkStyle","Header","react_router_dom","to","AddTodo","state","getTitle","e","setState","Object","defineProperty","target","name","value","submit","preventDefault","addTodo","onSubmit","display","placeholder","flex","className","About","Fragment","App","componentDidMount","getItems","updateTodo","delItems","_this2","layout_Header","react_router","exact","path","render","components_AddTodo","components_Todo","component","connect","dispatch","axios","post","then","res","payload","data","console","log","get","concat","Boolean","window","location","hostname","match","initialState","combineReducers","arguments","length","undefined","action","filter","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3bfa4fb7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n\n\n     getStyles = () => {\n         return ({\n             textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n             backgroundColor: '#ccc',\n             borderBottom: '1px black dotted',\n             padding: '10px'\n          }\n         );\n     };\n\n     render(){\n         const { id, title } = this.props.todo;\n\n         return(\n             <div style={this.getStyles()}>\n                <input type=\"checkbox\" onChange={this.props.completion.bind(this,id)} />{' '}\n                <span>{ title }</span>\n                <button style={btnStyle} onClick={this.props.delete.bind(this,id)} >X</button>\n             </div>\n         )\n     }\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    completion: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right',\n    border: 'none',\n    padding: '5px 10px'\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n\nclass Todo extends Component {\n\n    render(){\n\n         return (\n             this.props.todos.map((todo) => (\n                    <TodoItem key={todo.id} todo={todo} completion={this.props.completion} delete={this.props.delete} />\n             ))\n         )\n    }\n\n}\n\nTodo.propTypes = {\n    todos: PropTypes.array.isRequired,\n    completion: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired\n}\n\nexport default Todo;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nfunction Header() {\n    return (\n\n      <header style={headerStyle}>\n        <h1 > Todo List </h1>\n        <Link to=\"/\" style={linkStyle}>Home</Link> | <Link to=\"/about\" style={linkStyle}>About</Link>\n      </header >\n    )\n}\n\nconst headerStyle = {\n\n    background: 'black',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px',\n    marginBottom: '10px'\n}\n\nconst linkStyle = {\n  color: '#fff',\n  textDecoration: 'none'\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTodo extends Component {\n\n  state = {\n    title: ''\n  }\n\n     getTitle = (e) => {\n        this.setState({\n          [ e.target.name ]: e.target.value\n        })\n     }\n\n    submit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n    }\n\n     render(){\n\n       return(\n\n         <form onSubmit={this.submit} style={{display: 'flex'}}>\n\n           <input type=\"text\" name=\"title\"\n                  placeholder=\"Add Todo...\"\n                  style={{flex: '10',padding: '5px'}}\n                  value={this.state.title}\n                  onChange={this.getTitle}/>\n\n           <input type=\"submit\" value=\"submit\"\n                  className=\"btn\"\n                  style={{flex: '1'}}\n                  />\n         </form>\n\n       );\n     }\n}\n\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\nexport default AddTodo;\n","import React from 'react';\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is the about page of react for beginners course</p>\n    </React.Fragment>\n  )\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Todo from './components/Todo';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/Pages/About';\nimport { connect } from 'react-redux';\n// import store from './Store';\nimport { updateTodo, addTodo, getItems, delItems } from './actions/itemActions';\n\nclass App extends Component {\n\n    componentDidMount = () => {\n        this.props.getItems();\n    }\n\n    completion = (id) => {\n      this.props.updateTodo(id);\n    }\n\n    delete = (id) => {\n          this.props.delItems(id)\n    }\n\n    addTodo = (title) => {\n        this.props.addTodo(title);\n    }\n\n    render() {\n      const { todos } = this.props.todo;\n        return (\n            <Router>\n              <div className = \"App\" >\n                <div className=\"container\">\n                    <Header / >\n                    <Route exact path=\"/\" render={props => (\n                      <React.Fragment>\n                          <AddTodo addTodo={this.addTodo}/>\n                          <Todo todos = { todos }\n                              completion = { this.completion }\n                              delete = { this.delete }\n                              />\n                      </React.Fragment>\n                    )} />\n                    <Route path=\"/about\" component={About} />\n                </div>\n              </div>\n            </Router>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    todo: state.todo\n  });\n\nexport default connect(mapStateToProps, {addTodo, getItems, delItems, updateTodo})(App);\n","import axios from 'axios';\nimport { ADD_TODO, DEL_TODO, GET_TODO, UPDATE_TODO} from './Types';\n\nexport const getItems = () => dispatch => {\n  console.log(\"+++++++++++++++++++++\")\n    axios.get('http://jsonplaceholder.typicode.com/todos?_limit=5')\n    .then((res) => {\n      dispatch({\n        type: GET_TODO,        \n        payload: res.data\n      })\n    })\n}\n\nexport const delItems = (id) => dispatch => {\n\n    axios.delete(`http://jsonplaceholder.typicode.com/todos/${id}`)\n         .then((res) => {\n           dispatch({\n               type: DEL_TODO,\n               payload: id\n           })\n         })\n}\n\nexport const addTodo = (title) => dispatch => {\n    axios.post(\"http://jsonplaceholder.typicode.com/todos\",{\n            title,\n            completed: false\n        })\n         .then((res) => {\n           dispatch({\n                type: ADD_TODO,\n                payload: res.data\n           })\n         })\n\n  }\n\nexport const updateTodo = (id) => {\n    return {\n        type: UPDATE_TODO,\n        payload: id\n    }\n}","export const ADD_TODO = 'ADD_TODO';\nexport const DEL_TODO = 'DEL_TODO';\nexport const GET_TODO = 'GET_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO, DEL_TODO, GET_TODO, UPDATE_TODO } from '../actions/Types';\n\n\nconst initialState = {\n    todos: []\n}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case GET_TODO: \n            return {\n                todos: action.payload\n            }\n        case DEL_TODO:\n            return {\n                todos: state.todos.filter((todo) => (\n                    todo.id !== action.payload\n                ))\n            }\n        case ADD_TODO:\n            return {\n                todos: [...state.todos,action.payload] \n            }\n        case UPDATE_TODO:\n            return {\n                todos: state.todos.map((todo) => {\n                    if (todo.id === action.payload) {\n                        todo.completed = !todo.completed\n                    }\n                    return todo;\n                })\n            }\n        default:\n            return state;\n\n    }\n}\n\n","import { combineReducers } from 'redux';\nimport todoReducer from './todoReducer';\n\nexport default combineReducers({\n    todo: todoReducer,\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\n\nconst store = createStore(\n                        rootReducer,\n                        initialState,\n                        compose(\n                            applyMiddleware(...middleware),\n                            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n                        )\n                        );\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Store';\n\nReactDOM.render(\n    <Provider store={ store } >\n    <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}